// Mocks generated by Mockito 5.4.6 from annotations
// in flow/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flow/api/storage/remote/model.dart' as _i11;
import 'package:flow/api/storage/remote/service.dart' as _i14;
import 'package:flow/api/storage/sources.dart' as _i2;
import 'package:flow/cubits/flow.dart' as _i3;
import 'package:flow/cubits/settings.dart' as _i5;
import 'package:flow_api/models/cached.dart' as _i13;
import 'package:flow_api/services/database.dart' as _i6;
import 'package:flow_api/services/source.dart' as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:rxdart/rxdart.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSourcesService_0 extends _i1.SmartFake
    implements _i2.SourcesService {
  _FakeSourcesService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlowState_1 extends _i1.SmartFake implements _i3.FlowState {
  _FakeFlowState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSourceService_2 extends _i1.SmartFake implements _i4.SourceService {
  _FakeSourceService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsCubit_3 extends _i1.SmartFake implements _i5.SettingsCubit {
  _FakeSettingsCubit_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseService_4 extends _i1.SmartFake
    implements _i6.DatabaseService {
  _FakeDatabaseService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBehaviorSubject_5<T> extends _i1.SmartFake
    implements _i7.BehaviorSubject<T> {
  _FakeBehaviorSubject_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_6 extends _i1.SmartFake
    implements _i8.FlutterSecureStorage {
  _FakeFlutterSecureStorage_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlowCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlowCubit extends _i1.Mock implements _i3.FlowCubit {
  MockFlowCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SourcesService get sourcesService => (super.noSuchMethod(
        Invocation.getter(#sourcesService),
        returnValue: _FakeSourcesService_0(
          this,
          Invocation.getter(#sourcesService),
        ),
      ) as _i2.SourcesService);

  @override
  _i3.FlowState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeFlowState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.FlowState);

  @override
  _i9.Stream<_i3.FlowState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i3.FlowState>.empty(),
      ) as _i9.Stream<_i3.FlowState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  String getCurrentSource() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSource,
          [],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentSource,
            [],
          ),
        ),
      ) as String);

  @override
  List<String> getCurrentSources() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSources,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<_i11.RemoteStorage> getCurrentRemotes() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentRemotes,
          [],
        ),
        returnValue: <_i11.RemoteStorage>[],
      ) as List<_i11.RemoteStorage>);

  @override
  _i4.SourceService getCurrentService() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentService,
          [],
        ),
        returnValue: _FakeSourceService_2(
          this,
          Invocation.method(
            #getCurrentService,
            [],
          ),
        ),
      ) as _i4.SourceService);

  @override
  List<_i4.SourceService> getCurrentServices() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentServices,
          [],
        ),
        returnValue: <_i4.SourceService>[],
      ) as List<_i4.SourceService>);

  @override
  void removeSource(String? source) => super.noSuchMethod(
        Invocation.method(
          #removeSource,
          [source],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSource(String? source) => super.noSuchMethod(
        Invocation.method(
          #addSource,
          [source],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setSources(List<String>? sources) => super.noSuchMethod(
        Invocation.method(
          #setSources,
          [sources],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setDisabledSources(List<String>? sources) => super.noSuchMethod(
        Invocation.method(
          #setDisabledSources,
          [sources],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.SourceService getService(String? source) => (super.noSuchMethod(
        Invocation.method(
          #getService,
          [source],
        ),
        returnValue: _FakeSourceService_2(
          this,
          Invocation.method(
            #getService,
            [source],
          ),
        ),
      ) as _i4.SourceService);

  @override
  Map<String, _i4.SourceService> getCurrentServicesMap() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentServicesMap,
          [],
        ),
        returnValue: <String, _i4.SourceService>{},
      ) as Map<String, _i4.SourceService>);

  @override
  void emit(_i3.FlowState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i12.Change<_i3.FlowState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [SourceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSourceService extends _i1.Mock implements _i4.SourceService {
  MockSourceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.ModelService> get models => (super.noSuchMethod(
        Invocation.getter(#models),
        returnValue: <_i4.ModelService>[],
      ) as List<_i4.ModelService>);

  @override
  _i9.Future<void> import(
    _i13.CachedData? data, [
    bool? clear = true,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #import,
          [
            data,
            clear,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [SourcesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSourcesService extends _i1.Mock implements _i2.SourcesService {
  MockSourcesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_3(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i5.SettingsCubit);

  @override
  _i6.DatabaseService get local => (super.noSuchMethod(
        Invocation.getter(#local),
        returnValue: _FakeDatabaseService_4(
          this,
          Invocation.getter(#local),
        ),
      ) as _i6.DatabaseService);

  @override
  List<_i14.RemoteService<_i11.RemoteStorage>> get remotes =>
      (super.noSuchMethod(
        Invocation.getter(#remotes),
        returnValue: <_i14.RemoteService<_i11.RemoteStorage>>[],
      ) as List<_i14.RemoteService<_i11.RemoteStorage>>);

  @override
  _i7.BehaviorSubject<_i5.SyncStatus> get syncStatus => (super.noSuchMethod(
        Invocation.getter(#syncStatus),
        returnValue: _FakeBehaviorSubject_5<_i5.SyncStatus>(
          this,
          Invocation.getter(#syncStatus),
        ),
      ) as _i7.BehaviorSubject<_i5.SyncStatus>);

  @override
  _i8.FlutterSecureStorage get secureStorage => (super.noSuchMethod(
        Invocation.getter(#secureStorage),
        returnValue: _FakeFlutterSecureStorage_6(
          this,
          Invocation.getter(#secureStorage),
        ),
      ) as _i8.FlutterSecureStorage);

  @override
  set local(_i6.DatabaseService? _local) => super.noSuchMethod(
        Invocation.setter(
          #local,
          _local,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<bool> shouldSync() => (super.noSuchMethod(
        Invocation.method(
          #shouldSync,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> setup() => (super.noSuchMethod(
        Invocation.method(
          #setup,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> synchronize([bool? force = false]) => (super.noSuchMethod(
        Invocation.method(
          #synchronize,
          [force],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addRemote(
    _i11.RemoteStorage? remoteStorage,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRemote,
          [
            remoteStorage,
            password,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> removeRemote(String? name) => (super.noSuchMethod(
        Invocation.method(
          #removeRemote,
          [name],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  List<_i11.RemoteStorage> getRemotes() => (super.noSuchMethod(
        Invocation.method(
          #getRemotes,
          [],
        ),
        returnValue: <_i11.RemoteStorage>[],
      ) as List<_i11.RemoteStorage>);

  @override
  _i4.SourceService getSource(String? source) => (super.noSuchMethod(
        Invocation.method(
          #getSource,
          [source],
        ),
        returnValue: _FakeSourceService_2(
          this,
          Invocation.method(
            #getSource,
            [source],
          ),
        ),
      ) as _i4.SourceService);

  @override
  _i9.Future<void> clearRemotes() => (super.noSuchMethod(
        Invocation.method(
          #clearRemotes,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i11.RemoteStorage? getRemote(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getRemote,
        [key],
      )) as _i11.RemoteStorage?);
}
